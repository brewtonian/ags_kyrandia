// label to use for text actions
Label* action;

void set_ActionLabel(this TwoClickHandler*,  Label* label)
{
  action = label;
  action.Text = "";
}

Label* get_ActionLabel(this TwoClickHandler*)
{
  return action;
}

// GUI to use as inventory
GUI* interface_inv;

void set_InventoryGUI(this TwoClickHandler*,  GUI* invGui)
{
  interface_inv = invGui;
}

GUI* get_InventoryGUI(this TwoClickHandler*)
{
  return interface_inv;
}

// reversed control mode (left click to look)
bool classic = false;

void set_ReversedClicks(this TwoClickHandler*, bool reversed)
{
  classic = reversed;
}

bool get_ReversedClicks(this TwoClickHandler*)
{
  return classic;
}

MouseButton check_reversed(MouseButton button)
{
  if (classic)
  {
    if (button == eMouseLeft) return eMouseRight;
    if (button == eMouseRight) return eMouseLeft;
    if (button == eMouseLeftInv) return eMouseRightInv;
    if (button == eMouseRightInv) return eMouseLeftInv;
  }

  return button;
}

function do_room_action(MouseButton button)
{
  // Fire directional arrows as walk
  if (Mouse.Mode == eModeUp || 
      Mouse.Mode == eModeRight ||
      Mouse.Mode == eModeDown || 
      Mouse.Mode == eModeLeft) Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
  
  // Play a noise if hotspot is set to No Exit
  else if (Mouse.Mode == eModeNoExit) aTick.Play();
  else 
  {
    if (GetLocationType(mouse.x, mouse.y) != eLocationNothing)
    {
      // clicked on something
      if (player.ActiveInventory == null)
      {
        if (button == check_reversed(eMouseLeft))
        {
          // left click to interact with target
          Room.ProcessClick(mouse.x, mouse.y, eModeInteract);
        }
        else
        {
          // right click to look at target
          Room.ProcessClick(mouse.x, mouse.y, eModeLookat);
        }
      }
      else
      {
        if (button == check_reversed(eMouseLeft))
        {
          // left click to use inventory on target
          Room.ProcessClick(mouse.x, mouse.y, eModeUseinv);
        }
        else
        {
          // right click to deselect inventory item
          player.ActiveInventory = null;
        }
      }
    }
    else
    {
      // click on nothing
      if (player.ActiveInventory == null)
      {
        // left click to walk
        Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
      }
      else
      {
        // right click to deselect inventory item
        player.ActiveInventory = null;
      }
    }
  }
}

function do_inventory_action(MouseButton button, InventoryItem* item)
{
  if (button == check_reversed(eMouseLeftInv))
  {
    if (player.ActiveInventory == null)
    {
      // left click to set active inventory item
        player.ActiveInventory = item;
    }
    else if (item.ID != player.ActiveInventory.ID)
    {
      // left click to use active inventory on another item
      item.RunInteraction(eModeUseinv);
    }
    else
    {
      // left click item on itself to deselect it
      player.ActiveInventory = null;
    }
  }
  else
  {
    // right click to look at inventory item
    item.RunInteraction(eModeLookat);
  }
}

//----------------------------------------------------------------------------------------------------
// on_mouse_click()
//----------------------------------------------------------------------------------------------------
function on_mouse_click(MouseButton button)
{
  // when mouse is clicked, text label is cleared
  if (action != null)
  {
    // action.Text = "";
  }

  if (!IsGamePaused() && (button == eMouseLeft || button == eMouseRight))
  {
    do_room_action(button);
  }
  else if (button == eMouseLeftInv || button == eMouseRightInv)
  {
    // InventoryItem.GetAtScreenXY could return null here
    // so using game.inv_activated instead is a safer option
    do_inventory_action(button, inventory[game.inv_activated]);
  }
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute()
//----------------------------------------------------------------------------------------------------
function repeatedly_execute()
{
  // Action Text
  // We always display the name of what is under the mouse, with one exception:
  // IF the player has an inventory item selected and hovers over the same inventory item,
  // we display nothing to indicate that an item can not be used on itself
  if (player.ActiveInventory == null)
  {
    if (action != null && !IsGamePaused())
    {
      action.Text = Game.GetLocationName(mouse.x, mouse.y);
    }
  }
  else
  {
    InventoryItem *item = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
    if (action == null)
    {
      // pass
    }
    else if (item != null && item.ID == player.ActiveInventory.ID)
    {
      action.Text = "";
    }
    else
    {
      action.Text = Game.GetLocationName(mouse.x, mouse.y);
    }
  }      

    // Kyrandia Template code
    // Checks for directional boxes and changes the mouse mode to reflect the exit
    if (GetLocationType(mouse.x, mouse.y)  == eLocationHotspot)
    {
      mouse.SaveCursorUntilItLeaves();
      Hotspot* TheHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
      
      // Checks the Hotspot Property ExitType to find out which direction to show
      int exitType = TheHotspot.GetProperty("ExitType");
      if (exitType == eExitUp) Mouse.Mode = eModeUp;
      else if (exitType == eExitRight) Mouse.Mode = eModeRight;
      else if (exitType == eExitDown) Mouse.Mode = eModeDown;
      else if (exitType == eExitLeft) Mouse.Mode = eModeLeft;
      else if (exitType == eExitNo) Mouse.Mode = eModeNoExit;
    }
    else 
    {
      // Change the cursor back
      if (player.ActiveInventory != null) Mouse.Mode = eModeUseinv;
      else Mouse.Mode = eModePointer;
    }
}

// handle clicks in the inventory area that are not on an inventory item
function on_event(EventType event, int data)
{
  if (event == eEventGUIMouseDown &&
    interface_inv != null &&
    data == interface_inv.ID &&
    InventoryItem.GetAtScreenXY(mouse.x, mouse.y) == null)
  {
    GUIControl* control = GUIControl.GetAtScreenXY(mouse.x, mouse.y);

    if (control == null || control.AsInvWindow == null)
    {
      // pass
    }
    else if (player.ActiveInventory != null)
    {
      player.ActiveInventory = null;
    }
  }
}
