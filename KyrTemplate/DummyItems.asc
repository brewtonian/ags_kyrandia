////////////////////////////////////////
// Kyrandia-style Dummy Items
////////////////////////////////////////

int offset = 8;         // increase as needed - to stop items jumping around the screen
int dummy_count = 30;   // the maximum amount of dummy characters that can exist at once.
Dummy dummyItem[31];    // set this to the value of dummy_count + 1

// initializes array of dummies
void init_dummies()
{
  for (int i = 0; i <= dummy_count; i++)
  {
    dummyItem[i].dummyID = 0;
    dummyItem[i].inUse = false;
  }
}

// gets the next available dummy character
function get_next_dummy() 
{
  for (int i = 1; i <= dummy_count; i++)
  {
    if (dummyItem[i].inUse == false) return i;
  } 
  return 0; // no dummies left!
}

// creates a dummy character based on a provided inventory item
void create_dummy(InventoryItem* Item)
{
  int i = get_next_dummy();
  if (i > 0)
  {
    dummyItem[i].dummyID = Item.ID;
    dummyItem[i].inUse = true;
  
    Character* dummyChar = character[i];
    dummyChar.ChangeRoom(player.Room, mouse.x, mouse.y + offset);          // move the character to where the mouse was clicked - 'dropping' it.
    RemoveWalkableArea(2);
    dummyChar.PlaceOnWalkableArea();                                       // stops the object being stuck on a wall or something        
    int InvFrame = Item.GetProperty("InvFrame");                           // what's the inventory frame ID of the item?      
    dummyChar.LockViewFrame(1, 0, InvFrame);                               // locks it to the item's sprite            
    dummyChar.Name = Item.Name;
    dummyChar.Solid = false;                      // should be set by default but I forgot and there's like 30
    RestoreWalkableArea(2);
  }
  else player.Say("Dummy maximum reached!");      // this shouldn't happen. if you find it happening, make more dummies.
}

// resets a dummy character and restores it to the pool of available characters
void destroy_dummy(Character* dummyChar)
{
  int i = dummyChar.ID;
  dummyItem[i].dummyID = 0;
  dummyItem[i].inUse = false;
  dummyChar.ChangeRoom(0);                                            // sends it to the no-room      
  dummyChar.UnlockView();                                             // no longer locked to the item sprite
}

export dummyItem;
export init_dummies;
export create_dummy;
export destroy_dummy;
export dummy_count;
