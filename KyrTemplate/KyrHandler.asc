/*

Not sure why this is not working

void set_InventoryWindow(this KyrHandler*, InvWindow* invWin)
{
  inventory_window = invWin;
}

InvWindow* get_InventoryWindow(this KyrHandler*)
{
  return inventory_window;
}
*/

int invSlots = 10;  // increase as needed - max inventory slots in use at one time... this does need an upper limit


// Kyrandia direction arrow code
// returns hotspot custom integer ExitType

function get_exit_type()
{
  if (GetLocationType(mouse.x, mouse.y)  == eLocationHotspot)
  {
    mouse.SaveCursorUntilItLeaves();
    Hotspot* TheHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
    
    // Checks the Hotspot Property ExitType to find out which direction to show
    int exitType = TheHotspot.GetProperty("ExitType");
    if (exitType == eExitUp) return eModeUp;
    else if (exitType == eExitRight) return eModeRight;
    else if (exitType == eExitDown) return eModeDown;
    else if (exitType == eExitLeft) return eModeLeft;
    else if (exitType == eExitNo) return eModeNoExit;
  }
  else 
  {
    // Change the cursor back
    if (player.ActiveInventory != null) return eModeUseinv;
    else return eModePointer;
  }
}

  // drops the held inventory item
  void drop_held_item()
  {
        InventoryItem* Item = player.ActiveInventory;     // initialize the held item
        player.LoseInventory(Item);                       // take it out of the inventory
        player.ActiveInventory = null;                    // take it out of the cursor
        create_dummy(Item);                               // create a dummy character to show the item onscreen
  }
  
  void pick_up_item(Character* dummyChar)
  {
    int i = dummyChar.ID;                           // we know what character it is - which array member is it?
    i = dummyItem[i].dummyID;                       // now find the inventory ID number in the struct
    InventoryItem* item = inventory[i];             // now we know which item it is.
    player.AddInventory(item, invSlots);            // places it in the cursor
    player.ActiveInventory = item;                  // makes it active
    destroy_dummy(dummyChar);                       // send the character away
  }
  
  
// Handles when a character is clicked - called by unhandled event manager in GlobalScript
bool dummy_item_interaction()             
{
  Character* theCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);    // Who is this character
  if ((theCharacter.ID <= dummy_count) && (theCharacter.ID != 0))         // character is a dummy item in the room
  {
    InventoryItem* item = inventory[theCharacter.ID];   // finds which item as item number InvID
   
    if (player.ActiveInventory == null)       // Player is not holding an item
      pick_up_item(theCharacter);
    else
    {
      // Switch the item
      drop_held_item();
      pick_up_item(theCharacter);
    }
    return 1;
  }
  else    // not an item
  {
    return 0; // return to unhandled event manager
  }
}

// Retrieves the inventory window index of a selected item
  int get_item_index(InventoryItem* item)
  {
    InvWindow* inventory_window = gPanelWindow;
    for (int i = 0; i < inventory_window.ItemCount; i++)
    {
         if (inventory_window.ItemAtIndex[i] == item)
             return i;
    }
    return -1;// not found
  }

// Takes the inventory slot index and returns a blank slot
// this is extensible - just make sure you increase invSlots and create more blank inventory items in the range 1 - invSlots
void return_blank(int index)
{
  index++;
  InventoryItem* blank = inventory[index];
  index--;
  player.AddInventory(blank, index);
}

void take_item_from_slot(InventoryItem* item)
{
  int invID = get_item_index(item);   // find the inventory ID number of the clicked item

  if (item.ID > invSlots)                 // We're picking up an item from a slot
  {
    player.LoseInventory(item);
    return_blank(invID);
    player.AddInventory(item, invSlots);
    player.ActiveInventory = item;
  }
  else                              // Player clicked a blank slot.
  {
    // Do nothing.
    return;
  }
}

void drop_item_in_slot(InventoryItem* item)
{
  InvWindow* inventory_window = gPanelWindow; // inventory window to use for all this
  InventoryItem* active = inventory_window.ItemAtIndex[invSlots];  //  initialize the held item
  player.LoseInventory(active);
  int invID = get_item_index(item);
  player.AddInventory(active, invID);           //  move the empty box with the held item up the stack
  player.LoseInventory(item);                   //  remove the empty slot
  player.ActiveInventory = null;                //  we dropped it into the empty slot
}

void switch_item_in_slot(InventoryItem* item)
{
  InvWindow* inventory_window = gPanelWindow; // inventory window to use for all this
  InventoryItem* active = inventory_window.ItemAtIndex[invSlots];  //  initialize the held item
  int invID = get_item_index(item);
  player.LoseInventory(active);
  player.LoseInventory(item);                   //  remove the clicked item from inventory
  player.AddInventory(active, invID);           //  replace it with the held item
  player.AddInventory(item, invSlots);          //  put the clicked item into the cursor
  player.ActiveInventory = item;                //  swapping finished
}

function repeatedly_execute()
{
    Mouse.Mode = get_exit_type();  // Kyrandia-style exit arrows
}


export drop_held_item;
export pick_up_item;
export dummy_item_interaction;
export take_item_from_slot;
