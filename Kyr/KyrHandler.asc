int invSlots = 15;        // increase as needed - max inventory slots in use at one time... this does need an upper limit as it governs several functions
int playerSay = 0;        // used in player self-interaction function - resets on new room


///////////////////////////////////////////
// Direction arrows
///////////////////////////////////////////

function on_event(EventType event, int data)
{
  if (event == eEventEnterRoomBeforeFadein) 
  {
    labelRoomName.Text = Room.GetTextProperty("RoomName");
    SetTimer(1, 400);
  }
  if (event == eEventLeaveRoom) playerSay = 0;
}

function get_exit_type()
{
  if (GetLocationType(mouse.x, mouse.y)  == eLocationHotspot)
  {
    mouse.SaveCursorUntilItLeaves();
    Hotspot* TheHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
    
    // Checks the Hotspot Property ExitType to find out which direction to show
    int exitType = TheHotspot.GetProperty("ExitType");
    if (exitType == eExitUp) return eModeUp;
    else if (exitType == eExitRight) return eModeRight;
    else if (exitType == eExitDown) return eModeDown;
    else if (exitType == eExitLeft) return eModeLeft;
    else if (exitType == eExitNo) return eModeNoExit;
    else 
    {
      // Change the cursor back
      if (player.ActiveInventory != null) return eModeUseinv;
      else return eModePointer;
    }
  }
  else 
  {
    // Change the cursor back
    if (player.ActiveInventory != null) return eModeUseinv;
    else return eModePointer;
  }
}


///////////////////////////////////////////
// Inventory functions
///////////////////////////////////////////


  // drops the held inventory item
  void drop_held_item()
  {
        InventoryItem* Item = player.ActiveInventory;     // initialize the held item
        player.LoseInventory(Item);                       // take it out of the inventory
        player.ActiveInventory = null;                    // take it out of the cursor
        create_dummy(Item);                               // create a dummy character to show the item onscreen
  }
  
  void pick_up_item(Character* dummyChar)
  {
    int i = dummyChar.ID;                           // we know what character it is - which array member is it?
    i = dummyItem[i].dummyID;                       // now find the inventory ID number in the struct
    InventoryItem* item = inventory[i];             // now we know which item it is.
    player.AddInventory(item, invSlots);            // places it in the cursor
    player.ActiveInventory = item;                  // makes it active
    destroy_dummy(dummyChar);                       // send the character away
  }
  
  // for instances where we just want to put an item in the cursor, like when an item is changed.
  void add_item(InventoryItem* Item)
  {
    player.AddInventory(Item, invSlots);            // places it in the cursor
    player.ActiveInventory = Item;                  // makes it active
  }
  
// Handles when a character is clicked - called by unhandled event manager in GlobalScript
bool dummy_item_interaction()             
{
  Character* theCharacter = Character.GetAtScreenXY(mouse.x, mouse.y);    // Who is this character
  if ((theCharacter.ID <= dummy_count) && (theCharacter.ID != 0))         // character is a dummy item in the room
  {
    InventoryItem* item = inventory[theCharacter.ID];   // finds which item as item number InvID
   
    if (player.ActiveInventory == null)       // Player is not holding an item
      pick_up_item(theCharacter);
    else
    {
      // Switch the item
      drop_held_item();
      pick_up_item(theCharacter);
    }
    return 1;
  }
  else    // not an item
  {
    return 0; // return to unhandled event manager
  }
}

// Retrieves the inventory window index of a selected item
  int get_item_index(InventoryItem* item)
  {
    InvWindow* inventory_window = gPanelWindow;
    for (int i = 0; i < inventory_window.ItemCount; i++)
    {
         if (inventory_window.ItemAtIndex[i] == item)
             return i;
    }
    return -1;// not found
  }

// Takes the inventory slot index and returns a blank slot
// this is extensible - just make sure you increase invSlots and create more blank inventory items in the range 1 - invSlots
void return_blank(int index)
{
  index++;
  InventoryItem* blank = inventory[index];
  index--;
  player.AddInventory(blank, index);
}

void take_item_from_slot(InventoryItem* item)
{
  int invID = get_item_index(item);   // find the inventory ID number of the clicked item

  if (item.ID > invSlots)                 // We're picking up an item from a slot
  {
    player.LoseInventory(item);
    return_blank(invID);
    player.AddInventory(item, invSlots);
    player.ActiveInventory = item;
  }
  else                              // Player clicked a blank slot.
  {
    // Do nothing.
    return;
  }
}

void drop_item_in_slot(InventoryItem* item)
{
  InvWindow* inventory_window = gPanelWindow; // inventory window to use for all this
  InventoryItem* active = inventory_window.ItemAtIndex[invSlots];  //  initialize the held item
  player.LoseInventory(active);
  int invID = get_item_index(item);
  player.AddInventory(active, invID);           //  move the empty box with the held item up the stack
  player.LoseInventory(item);                   //  remove the empty slot
  player.ActiveInventory = null;                //  we dropped it into the empty slot
}

void switch_item_in_slot(InventoryItem* item)
{
  InvWindow* inventory_window = gPanelWindow; // inventory window to use for all this
  InventoryItem* active = inventory_window.ItemAtIndex[invSlots];  //  initialize the held item
  int invID = get_item_index(item);
  player.LoseInventory(active);
  player.LoseInventory(item);                   //  remove the clicked item from inventory
  player.AddInventory(active, invID);           //  replace it with the held item
  player.AddInventory(item, invSlots);          //  put the clicked item into the cursor
  player.ActiveInventory = item;                //  swapping finished
}

///////////////////////////////////////////
// inventory scrolling
///////////////////////////////////////////
// Because of how the inventory script works, we need to control the amount of inventory items visible.
// If it goes over the value in invSlots, the cursor item will be selectable. This will break things.
// So now we have to figure out how many times we can scroll down before causing it to break.
//
// note that this really depends on having some amount of slots that is easily divisible by rows:
// 
// invSlots / rows = some integer
// and 
// invSlots % rows = 0

int invRows = 3;                      // maximum rows in inventory
int visibleRows = 2;                  // visible rows
int currentRow = 2;                   // currently visible row


void inv_scroll_up()
{
  if (currentRow != (visibleRows)) 
  {
    gPanelWindow.ScrollUp();
    currentRow--;
  }
  else aTick.Play();
  //player.Say("current row is: %d",currentRow);
}

void inv_scroll_down()
{
  if (currentRow != (invRows))
  {
    gPanelWindow.ScrollDown();
    currentRow++;
  }
  else aTick.Play();
  //player.Say("current row is: %d",currentRow);
}




///////////////////////////////////////////
// Repeatedly Execute
///////////////////////////////////////////

function repeatedly_execute()
{
  if (IsTimerExpired(1))
  {
    labelRoomName.Text = "";         // clear the room name
  }
    Mouse.Mode = get_exit_type();  // Kyrandia-style exit arrows
}



///////////////////////////////////////////
// Player Self Interaction
///////////////////////////////////////////
// handles text said when clicking on the player.
// player says different values based on current GameArea.
// GameArea is a room property. playerSay resets on room change.

void player_self()
{
  if (playerSay == 3) playerSay = 0;
  int GameArea = Room.GetProperty("GameArea");
  int interaction = playerSay;
  
  if (GameArea == 1) // first game region
  {
    if (interaction == 0) player.Say("My feet are killing me!");
    else if (interaction == 1) player.Say("If there's a merchant nearby, I'll get new socks.");
    else if (interaction == 2) player.Say("I miss my sandals.");
  }
  else if (GameArea == 2) // second game region
  {
    if (interaction == 0) player.Say("I wonder how Grandfather is doing.");
    else if (interaction == 1) player.Say("I'm starving. I never did get lunch!");
    else if (interaction == 2) player.Say("Who would notice if I just went home?");    
  }
  else player.Say("Where the heck am I?");    // for unhandled regions
  
  playerSay++;
}

export inv_scroll_down;
export inv_scroll_up;
export invSlots;
export player_self;
export add_item;
export drop_held_item;
export pick_up_item;
export dummy_item_interaction;
export take_item_from_slot;
