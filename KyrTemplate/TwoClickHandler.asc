// label to use for text actions
Label* action;

void set_ActionLabel(this TwoClickHandler*,  Label* label)
{
  action = label;
  action.Text = "";
}

Label* get_ActionLabel(this TwoClickHandler*)
{
  return action;
}

// GUI to use as inventory
GUI* interface_inv;

void set_InventoryGUI(this TwoClickHandler*,  GUI* invGui)
{
  interface_inv = invGui;
}

GUI* get_InventoryGUI(this TwoClickHandler*)
{
  return interface_inv;
}

// reversed control mode (left click to look)
bool classic = false;

void set_ReversedClicks(this TwoClickHandler*, bool reversed)
{
  classic = reversed;
}

bool get_ReversedClicks(this TwoClickHandler*)
{
  return classic;
}

MouseButton check_reversed(MouseButton button)
{
  if (classic)
  {
    if (button == eMouseLeft) return eMouseRight;
    if (button == eMouseRight) return eMouseLeft;
    if (button == eMouseLeftInv) return eMouseRightInv;
    if (button == eMouseRightInv) return eMouseLeftInv;
  }

  return button;
}

////////////////////////////////////////
// Kyrandia Template functions
////////////////////////////////////////

int invSlots = 10;  // increase as needed
int offset = 8;
// int offset = InventoryWindow1.ItemHeight / 2; - this isn't working for some reason


  // drops the held inventory item
  void drop_held_item()
  {
        InventoryItem* Item = player.ActiveInventory;                          // initialize the held item
        int CharID = Item.GetProperty("CharID");                               // what's the character?
        character[CharID].ChangeRoom(player.Room, mouse.x, mouse.y + offset);  // move the character to where the mouse was clicked - 'dropping' it.
        RemoveWalkableArea(2);
        character[CharID].PlaceOnWalkableArea();                               // stops the object being stuck on a wall or something        
        RestoreWalkableArea(2);
        player.LoseInventory(Item);
        player.ActiveInventory = null;
  }
  
  void pick_up_item(InventoryItem* item, Character* itemChar)
  {
      player.AddInventory(item, invSlots);            // places it in the cursor
      player.ActiveInventory = item;                  // makes it active
      itemChar.ChangeRoom(0);                         // sends it to the inventory room      
  }
  
  
// Handles when a character is clicked
bool character_item_interaction()             
{
  Character* itemChar = Character.GetAtScreenXY(mouse.x, mouse.y);    // Who is this character?
  int invID = itemChar.GetProperty("InvID");                          // returns the custom InvID property that corresponds to the inventory item number. 0 = not an item.
  
  if (invID != 0) // character an item in the room
  {
    InventoryItem* item = inventory[invID];   // finds which item as item number InvID
   
    if (player.ActiveInventory == null)       // Player is not holding an item
      pick_up_item(item, itemChar);
    else
    {
      // Switch the item
      drop_held_item();
      pick_up_item(item, itemChar);
    }
    return 1;
  }
  else    // not an item
  {
    return 0;
  }
}

function do_room_action(MouseButton button)
{
  // Fire room exit arrows as Walkto
  if (Mouse.Mode == eModeUp || 
      Mouse.Mode == eModeRight ||
      Mouse.Mode == eModeDown || 
      Mouse.Mode == eModeLeft) Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
  
  // Play a noise if hotspot is set to No Exit
  else if (Mouse.Mode == eModeNoExit) aTick.Play();
  else 
  {
    if (GetLocationType(mouse.x, mouse.y) != eLocationNothing)
    {
      // clicked on something
      // and holding nothing
      if (player.ActiveInventory == null)
      {
        if (button == check_reversed(eMouseLeft))
        {
          // left click to interact with target
          Room.ProcessClick(mouse.x, mouse.y, eModeInteract);
        }
        else
        {
          // right click to look at target
          Room.ProcessClick(mouse.x, mouse.y, eModeLookat);
        }
      }
      // clicked on something
      // and holding an item
      else
      {
        if (button == check_reversed(eMouseLeft))
        {
          // left click to use inventory on target
          Room.ProcessClick(mouse.x, mouse.y, eModeUseinv);
        }
        else
        {
          drop_held_item();   // drop it!
        }
      }
    }
    else
    {
      // click on nothing
      // and holding nothing
      if (player.ActiveInventory == null)
      {
        // left click to walk
        Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
      }
      else
      // click on nothing
      // and holding something!
      {
        drop_held_item();   // drop it!
      }
    }
  }
}

// Retrieves the inventory window index of a selected item
  int GetItemIndexInInventory(InvWindow* inv, InventoryItem* item)
  {
    for (int i = 0; i < inv.ItemCount; i++)
    {
         if (inv.ItemAtIndex[i] == item)
             return i;
    }
    return -1;// not found
  }


// Takes the inventory slot index and returns a blank slot
function return_blank(int index)
{
  if (index == 0) player.AddInventory(iBlank1, index);
  else if (index == 1) player.AddInventory(iBlank2, index);
  else if (index == 2) player.AddInventory(iBlank3, index);
  else if (index == 3) player.AddInventory(iBlank4, index);
  else if (index == 4) player.AddInventory(iBlank5, index);
  else if (index == 5) player.AddInventory(iBlank6, index);
  else if (index == 6) player.AddInventory(iBlank7, index);
  else if (index == 7) player.AddInventory(iBlank8, index);
  else if (index == 8) player.AddInventory(iBlank9, index);
  else if (index == 9) player.AddInventory(iBlank10, index);
}

function do_inventory_action(MouseButton button, InventoryItem* item, InvWindow* inv)
{  
  // find the inventory ID number of the clicked item
  int invIdNumber = GetItemIndexInInventory(InventoryWindow1, item);
  
  if (button == check_reversed(eMouseLeftInv))
  {
    if (player.ActiveInventory == null)  // Player is not holding anything
    {                                    
      if (item.ID <= 10)                 // Player clicked a blank slot.
      {
        // nothing - you can't get something from nothing (unless this is a HHTTG game)
      }
      else // We're picking up an item from a slot
      {
        player.LoseInventory(item);
        return_blank(invIdNumber);
        player.AddInventory(item, invSlots);
        player.ActiveInventory = item;
      }
      return;
    }
    else
    {
      if (item.ID != player.ActiveInventory.ID)          //  Player is holding an item (slot 10)
      {   
        InventoryItem* active = inv.ItemAtIndex[invSlots];  //  initialize the held item
        player.LoseInventory(active);                       //  remove the item from the cursor
          
        if (item.ID <= 10)  // we're putting something into a blank slot
        {
          player.AddInventory(active, invIdNumber);     //  move the empty box with the held item up the stack
          player.LoseInventory(item);                   //  remove the empty slot
          player.ActiveInventory = null;                //  we dropped it into the empty slot
        }
        else // we're switching inventory slots
        {  
          player.LoseInventory(item);                   //  remove the clicked item from inventory
          player.AddInventory(active, invIdNumber);     //  replace it with the held item
          player.AddInventory(item, invSlots);          //  put the clicked item into the cursor
          player.ActiveInventory = item;                //  swapping finished
        }
      }
    }
  }
  else
  {
    // is the player holding an object?
    if (player.ActiveInventory == null)
    {
      // No. Right click to look at inventory item    
      item.RunInteraction(eModeLookat);
    }
    else
    {
      // Do nothing.
    }
  }
}

//----------------------------------------------------------------------------------------------------
// on_mouse_click()
//----------------------------------------------------------------------------------------------------
function on_mouse_click(MouseButton button)
{
  // when mouse is clicked, text label is cleared
  if (action != null)
  {
    action.Text = "";
  }

  if (!IsGamePaused() && (button == eMouseLeft || button == eMouseRight))
  {
    do_room_action(button);
  }
  else if (button == eMouseLeftInv || button == eMouseRightInv)
  {
    // InventoryItem.GetAtScreenXY could return null here
    // so using game.inv_activated instead is a safer option
    do_inventory_action(button, inventory[game.inv_activated], InventoryWindow1);
  }
}

//----------------------------------------------------------------------------------------------------
// repeatedly_execute()
//----------------------------------------------------------------------------------------------------
function repeatedly_execute()
{
  // Action Text
  // We always display the name of what is under the mouse, with one exception:
  // IF the player has an inventory item selected and hovers over the same inventory item,
  // we display nothing to indicate that an item can not be used on itself
  if (player.ActiveInventory == null)
  {
    if (action != null && !IsGamePaused())
    {
      action.Text = Game.GetLocationName(mouse.x, mouse.y);
    }
  }
  else
  {
    InventoryItem *item = InventoryItem.GetAtScreenXY(mouse.x, mouse.y);
    if (action == null)
    {
    }
    else if (item != null && item.ID == player.ActiveInventory.ID)
    {
      action.Text = "";
    }
    else
    {
      action.Text = Game.GetLocationName(mouse.x, mouse.y);
    }
  }      

    // Kyrandia direction arrow code
    // Checks for directional boxes and changes the mouse mode to reflect the exit
    // Checks hotspots for custom integer value ExitType
    
    if (GetLocationType(mouse.x, mouse.y)  == eLocationHotspot)
    {
      mouse.SaveCursorUntilItLeaves();
      Hotspot* TheHotspot = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
      
      // Checks the Hotspot Property ExitType to find out which direction to show
      int exitType = TheHotspot.GetProperty("ExitType");
      if (exitType == eExitUp) Mouse.Mode = eModeUp;
      else if (exitType == eExitRight) Mouse.Mode = eModeRight;
      else if (exitType == eExitDown) Mouse.Mode = eModeDown;
      else if (exitType == eExitLeft) Mouse.Mode = eModeLeft;
      else if (exitType == eExitNo) Mouse.Mode = eModeNoExit;
    }
    else 
    {
      // Change the cursor back
      if (player.ActiveInventory != null) Mouse.Mode = eModeUseinv;
      else Mouse.Mode = eModePointer;
    }
}

// handle clicks in the inventory area that are not on an inventory item
function on_event(EventType event, int data)
{
  if (event == eEventGUIMouseDown &&
    interface_inv != null &&
    data == interface_inv.ID &&
    InventoryItem.GetAtScreenXY(mouse.x, mouse.y) == null)
  {
    GUIControl* control = GUIControl.GetAtScreenXY(mouse.x, mouse.y);

    if (control == null || control.AsInvWindow == null)
    {
      // pass
    }
    else if (player.ActiveInventory != null)
    {
      player.ActiveInventory = null;
    }
  }
}
